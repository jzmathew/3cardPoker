#include <vector> #include <cassert>#include <unordered_map>#include <string>#include <iostream>#include <algorithm>#include <ostream>#include "data.h"using namespace std;typedef bool (*highWins) (vector<Card> &hand);void readin(int &numPlayers, vector<Hand> &game);bool threeOfKindCheck(vector<Card> &hand);bool pairCheck(vector<Card> &hand);int findPair(vector<Card> &hand);bool flushCheck(vector<Card> &hand);bool straightCheck(vector<Card> &hand);bool straightFlushCheck(vector<Card> &hand);int compareHand(vector<Card> &lhs, vector<Card> &rhs);void tieCheck(int &index, vector<Hand> &game, vector<int> &winners);void pairWin(int &numPlayers, vector<Hand> &game, vector<int> &winners);void runGame(int &numPlayers, vector<Hand> &game);using namespace std;int main(){	int numPlayers = 0;	cin >> numPlayers;	//error check for valid players	if(numPlayers <= 0){		cerr << "Must have at least 1 player";		exit(1);	}	vector<Hand> game;	game.resize(numPlayers);	readin(numPlayers, game);	//only one possible winner	if(numPlayers == 1){		cout << "0"; 		return 0;	}	//driver for game	runGame(numPlayers, game);		return 0;}//reads from STDINPUT, creates correct number of cards and hands// Check for properly formatted cards and converts face cards to #// sorts hands in descending ordervoid readin(int &numPlayers, vector<Hand> &game){	unordered_map<char, int> faceCards;	faceCards['2'] = 2;	faceCards['3'] = 3;	faceCards['4'] = 4;	faceCards['5'] = 5;	faceCards['6'] = 6;	faceCards['7'] = 7;	faceCards['8'] = 8;	faceCards['9'] = 9;	faceCards['T'] = 10;	faceCards['J'] = 11;	faceCards['Q'] = 12;	faceCards['K'] = 13;	faceCards['A'] = 14;	unordered_map<char, char> suits;	suits['c'] = 'c';	suits['d'] = 'd';	suits['h'] = 'h';	suits['s'] = 's';	char trash = ' ';	for(int i = 0; i < numPlayers; ++i){		string card1  = "";		cin >> trash;		for(int j = 0; j < 3; ++j){			cin >> card1;			//error check of formatting			if(faceCards.find(card1[0]) == faceCards.end() || suits.find(card1[1]) == suits.end()){								cerr << "Improper formatting of input" << endl;				exit(1);			}			Card cardInput = Card(faceCards[card1[0]], card1[1]);			game[i].hand.emplace_back(cardInput);		}		sort(game[i].hand.begin(), game[i].hand.end());		reverse(game[i].hand.begin(), game[i].hand.end());	}}bool threeOfKindCheck(vector<Card> &hand){	if(hand[0].value == hand[1].value && hand[0].value == hand[2].value){		return true;	}	else {		return false;	}}bool pairCheck(vector<Card> &hand){	if(hand[0].value == hand[1].value || hand[0].value == hand[2].value || hand[1].value == hand[2].value){		return true;	}	else{		return false;	}}//will return pair for later checking of higher pairint findPair(vector<Card> &hand){	if(hand[0].value == hand[1].value || hand[0].value == hand[2].value){		return hand[0].value;	}	else{		return hand[1].value;	}}bool flushCheck(vector<Card> &hand){	if(hand[0].suit == hand[2].suit && hand[0].suit == hand[1].suit ){		return true; 	}	else{		return false;	}}//checks for straight and edge case of when Ace could be a 1,2,3 straight over 14bool straightCheck(vector<Card> &hand){	if(hand[0].value == hand[1].value + 1 && hand[0].value == hand[2].value + 2){		return true;	}	else if(hand[1].value == 3 && hand[0].value == 14 && hand[2].value == 2){		return true;	}	else{		return false;	}}bool straightFlushCheck(vector<Card> &hand){	if(straightCheck(hand) && flushCheck(hand)){		return true;	}	else {		return false;	}}//returns 1 if left is greater than right, 0 if equal, -1 if right is greater thanint compareHand(vector<Card> &lhs, vector<Card> &rhs){	for(int i = 0; i < 3; ++i){		if(lhs[i].value > rhs[i].value){			return 1;		}		else if(lhs[i].value < rhs[i].value){			return -1;		}	}	return 0;}//compares a possible winner and a current to break tiesvoid tieCheck(int &index, vector<Hand> &game, vector<int> &winners){	//not a tie, new hand is better	if(compareHand(game[index].hand, game[winners[0]].hand) == 1){		winners.clear();		winners.push_back(index);	}	//full tie, both are winners	else if (compareHand(game[index].hand, game[winners[0]].hand) == 0){		winners.push_back(index);	}	else{		//new hand is not a winner	}}//checks for the case of a pair win, if pair is found then, compares all pairs//for higher pair winvoid pairWin(int &numPlayers, vector<Hand> &game, vector<int> &winners){	int maxPair = 0;	for(int i = 0; i < numPlayers; ++i){		if(pairCheck(game[i].hand)){			if(findPair(game[i].hand) > maxPair){				winners.clear();				maxPair = findPair(game[i].hand);				winners.push_back(i);			}			else if (findPair(game[i].hand) == maxPair){				if(!winners.empty()){					tieCheck(i, game, winners);				}				else{					winners.push_back(i);				}			}		}	}	if(winners.empty()){		return;	}	else{		for(unsigned int i = 0; i < winners.size(); ++i ){			cout << winners[i] << " ";			return;		}	}}//driver for poker game//runs through the top 4 win conditions, then checks for pair win// if no clear winning hand then checks high cards// breaks and returns as soon as a winning hand is finished and all other // hands are checked for that win conditionvoid runGame(int &numPlayers, vector<Hand> &game){	//array function pointers to of win conditions for top 4 win conditions	highWins functions[] = 	{straightFlushCheck, threeOfKindCheck, straightCheck, flushCheck};	//iterates through wins	for(int j = 0; j < 4; ++j){		vector<int> winners;		for(int i = 0; i < numPlayers; ++i){			//checks for win			if(functions[j](game[i].hand)){				//if winner has already been found, check for tie				if(!winners.empty()){					tieCheck(i, game, winners);				}				else{					//if no other win so far, becomes current winner					winners.push_back(i);				}			}		}		//if winner has been found, print and return		if(!winners.empty()){			for(unsigned int i = 0; i < winners.size(); ++i ){				cout << winners[i] << " ";			}			return;		}		else{}	}	vector<int> winners;	//pair check	pairWin( numPlayers, game, winners);	//if pair has been found return	if(!winners.empty()){		return;	}	else{		//start high card check with player 0 as temp winner		winners.push_back(0);		for(int i = 1; i < numPlayers; ++i){			tieCheck(i, game, winners);		}		for(unsigned int i = 0; i < winners.size(); ++i){			cout << winners[i] << " ";		}	}}